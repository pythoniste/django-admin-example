# Generated by Django 2.1.7 on 2019-02-16 20:03

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import functools
import topology.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(db_index=True, max_length=127, unique=True, verbose_name='label')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_set', to='topology.Category', verbose_name='parent')),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'ordering': ('label',),
            },
        ),
        migrations.CreateModel(
            name='Mapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(verbose_name='order')),
                ('info', models.CharField(max_length=255, verbose_name='additional information')),
            ],
            options={
                'verbose_name': 'mapping',
                'verbose_name_plural': 'mappings',
                'ordering': ('test', 'tag', 'order'),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(db_index=True, help_text='used in the menu when fully deployed', max_length=127, unique=True, verbose_name='menu label')),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
                'ordering': ('label',),
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(db_index=True, max_length=32, unique=True, verbose_name='label')),
                ('number', models.PositiveSmallIntegerField(unique=True, verbose_name='number')),
                ('percent', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='percent')),
                ('progress', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='progress')),
                ('grade', models.IntegerField(validators=[django.core.validators.MinValueValidator(-10), django.core.validators.MaxValueValidator(10)], verbose_name='grade')),
                ('slug', models.SlugField(max_length=32, unique=True)),
                ('owner', models.EmailField(blank=True, max_length=254, null=True, verbose_name='owner')),
                ('url', models.URLField(blank=True, null=True, verbose_name='url')),
                ('key', models.UUIDField(default=uuid.uuid4)),
                ('description', models.TextField(verbose_name='description')),
                ('active', models.BooleanField(verbose_name='active')),
                ('highlight', models.NullBooleanField(verbose_name='highlight')),
                ('creation_date', models.DateField(auto_now_add=True, verbose_name='creation date')),
                ('last_modification_date', models.DateField(auto_now=True, verbose_name='last modification date')),
                ('random_date', models.DateField(verbose_name='random date')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='creation datetime')),
                ('last_modification_datetime', models.DateTimeField(auto_now=True, verbose_name='last modification datetime')),
                ('random_datetime', models.DateTimeField(verbose_name='random datetime')),
                ('duration', models.DurationField(verbose_name='duration')),
                ('creation_time', models.TimeField(auto_now_add=True, verbose_name='creation time')),
                ('last_modification_time', models.TimeField(auto_now=True, verbose_name='last modification time')),
                ('random_time', models.TimeField(verbose_name='random time')),
                ('ip', models.GenericIPAddressField(verbose_name='IP v4 ou 6')),
                ('ipv4', models.GenericIPAddressField(protocol='IPv4', verbose_name='IP v4 as is')),
                ('ipv6_forced', models.GenericIPAddressField(unpack_ipv4=True, verbose_name='IP v6 (ipv4 will be converted)')),
                ('ipv6', models.GenericIPAddressField(protocol='IPv6', verbose_name='IP v6')),
                ('raw_data', models.BinaryField(blank=True, editable=True, max_length=127, verbose_name='raw data')),
                ('file', models.FileField(blank=True, max_length=256, null=True, upload_to=functools.partial(topology.models.Test.compute_upload_path, *(), **{'subpath': 'file'}), verbose_name='file')),
                ('image', models.ImageField(blank=True, max_length=256, null=True, upload_to=functools.partial(topology.models.Test.compute_upload_path, *(), **{'subpath': 'image'}), verbose_name='image')),
                ('path', models.FilePathField(path='/home/sebastien/Documents/GMLF/Django/admin/django-admin-example/example/static/', verbose_name='path')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag_set', to='topology.Category', verbose_name='category')),
                ('category2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag2_set', to='topology.Category', verbose_name='category 2')),
                ('category3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag3_set', to='topology.Category', verbose_name='category 3')),
                ('category4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag4_set', to='topology.Category', verbose_name='category 4')),
                ('category5', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag5_set', to='topology.Category', verbose_name='category 5')),
                ('category6', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag6_set', to='topology.Category', verbose_name='category 6')),
                ('tag', models.ManyToManyField(blank=True, related_name='tag_set', through='topology.Mapping', to='topology.Tag', verbose_name='themes')),
            ],
            options={
                'verbose_name': 'test',
                'verbose_name_plural': 'tests',
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(db_index=True, max_length=127, unique=True, verbose_name='label')),
                ('color', models.CharField(choices=[('#ffffff', 'White'), ('#ff0000', 'Red'), ('#00ff00', 'Green'), ('#0000ff', 'Blue'), ('#000000', 'Black')], db_index=True, max_length=1, unique=True, verbose_name='color')),
            ],
            options={
                'verbose_name': 'theme',
                'verbose_name_plural': 'themes',
                'ordering': ('label',),
            },
        ),
        migrations.AddField(
            model_name='test',
            name='themes',
            field=models.ManyToManyField(blank=True, related_name='tag_set', to='topology.Theme', verbose_name='themes'),
        ),
        migrations.AddField(
            model_name='test',
            name='themes2',
            field=models.ManyToManyField(blank=True, related_name='tag2_set', to='topology.Theme', verbose_name='themes 2'),
        ),
        migrations.AddField(
            model_name='test',
            name='themes3',
            field=models.ManyToManyField(blank=True, related_name='tag3_set', to='topology.Theme', verbose_name='themes 3'),
        ),
        migrations.AddField(
            model_name='test',
            name='themes4',
            field=models.ManyToManyField(blank=True, related_name='tag4_set', to='topology.Theme', verbose_name='themes 4'),
        ),
        migrations.AddField(
            model_name='test',
            name='themes5',
            field=models.ManyToManyField(blank=True, related_name='tag5_set', to='topology.Theme', verbose_name='themes 5'),
        ),
        migrations.AddField(
            model_name='test',
            name='themes6',
            field=models.ManyToManyField(blank=True, related_name='tag6_set', to='topology.Theme', verbose_name='themes 6'),
        ),
        migrations.AddField(
            model_name='mapping',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mapping_set', to='topology.Tag', verbose_name='tag'),
        ),
        migrations.AddField(
            model_name='mapping',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mapping_set', to='topology.Test', verbose_name='test'),
        ),
        migrations.AlterUniqueTogether(
            name='mapping',
            unique_together={('test', 'tag', 'order')},
        ),
        migrations.AlterIndexTogether(
            name='mapping',
            index_together={('test', 'tag', 'order')},
        ),
    ]
